// autogenerated from include/linux/lsm_hook_defs.h
std::vector<lsm_hook> s_hooks = {
 { "binder_set_context_mgr" },
 { "binder_transaction" },
 { "binder_transfer_binder" },
 { "binder_transfer_file" },
 { "ptrace_access_check" },
 { "ptrace_traceme" },
 { "capget" },
 { "capset" },
 { "capable" },
 { "quotactl" },
 { "quota_on" },
 { "syslog" },
 { "settime" },
 { "vm_enough_memory" },
 { "bprm_creds_for_exec" },
 { "bprm_creds_from_file" },
 { "bprm_check_security" },
 { "bprm_committing_creds" },
 { "bprm_committed_creds" },
 { "fs_context_dup" },
 { "fs_context_parse_param" },
 { "sb_alloc_security" },
 { "sb_free_security" },
 { "sb_free_mnt_opts" },
 { "sb_eat_lsm_opts" },
 { "sb_remount" },
 { "sb_kern_mount" },
 { "sb_show_options" },
 { "sb_statfs" },
 { "sb_mount" },
 { "sb_umount" },
 { "sb_pivotroot" },
 { "sb_set_mnt_opts" },
 { "sb_clone_mnt_opts" },
 { "sb_add_mnt_opt" },
 { "move_mount" },
 { "dentry_init_security" },
 { "dentry_create_files_as" },
 { "path_unlink" },
 { "path_mkdir" },
 { "path_rmdir" },
 { "path_mknod" },
 { "path_truncate" },
 { "path_symlink" },
 { "path_link" },
 { "path_rename" },
 { "path_chmod" },
 { "path_chown" },
 { "path_chroot" },
 { "path_notify" },
 { "inode_alloc_security" },
 { "inode_free_security" },
 { "inode_init_security" },
 { "inode_create" },
 { "inode_link" },
 { "inode_unlink" },
 { "inode_symlink" },
 { "inode_mkdir" },
 { "inode_rmdir" },
 { "inode_mknod" },
 { "inode_rename" },
 { "inode_readlink" },
 { "inode_follow_link" },
 { "inode_permission" },
 { "inode_setattr" },
 { "inode_getattr" },
 { "inode_setxattr" },
 { "inode_post_setxattr" },
 { "inode_getxattr" },
 { "inode_listxattr" },
 { "inode_removexattr" },
 { "inode_need_killpriv" },
 { "inode_killpriv" },
 { "inode_getsecurity" },
 { "inode_setsecurity" },
 { "inode_listsecurity" },
 { "inode_getsecid" },
 { "inode_copy_up" },
 { "inode_copy_up_xattr" },
 { "kernfs_init_security" },
 { "file_permission" },
 { "file_alloc_security" },
 { "file_free_security" },
 { "file_ioctl" },
 { "mmap_addr" },
 { "mmap_file" },
 { "file_mprotect" },
 { "file_lock" },
 { "file_fcntl" },
 { "file_set_fowner" },
 { "file_send_sigiotask" },
 { "file_receive" },
 { "file_open" },
 { "task_alloc" },
 { "task_free" },
 { "cred_alloc_blank" },
 { "cred_free" },
 { "cred_prepare" },
 { "cred_transfer" },
 { "cred_getsecid" },
 { "kernel_act_as" },
 { "kernel_create_files_as" },
 { "kernel_module_request" },
 { "kernel_load_data" },
 { "kernel_post_load_data" },
 { "kernel_read_file" },
 { "kernel_post_read_file" },
 { "task_fix_setuid" },
 { "task_fix_setgid" },
 { "task_setpgid" },
 { "task_getpgid" },
 { "task_getsid" },
 { "task_getsecid" },
 { "task_setnice" },
 { "task_setioprio" },
 { "task_getioprio" },
 { "task_prlimit" },
 { "task_setrlimit" },
 { "task_setscheduler" },
 { "task_getscheduler" },
 { "task_movememory" },
 { "task_kill" },
 { "task_prctl" },
 { "task_to_inode" },
 { "ipc_permission" },
 { "ipc_getsecid" },
 { "msg_msg_alloc_security" },
 { "msg_msg_free_security" },
 { "msg_queue_alloc_security" },
 { "msg_queue_free_security" },
 { "msg_queue_associate" },
 { "msg_queue_msgctl" },
 { "msg_queue_msgsnd" },
 { "msg_queue_msgrcv" },
 { "mptcp_add_subflow" },
 { "shm_alloc_security" },
 { "shm_free_security" },
 { "shm_associate" },
 { "shm_shmctl" },
 { "shm_shmat" },
 { "sem_alloc_security" },
 { "sem_free_security" },
 { "sem_associate" },
 { "sem_semctl" },
 { "sem_semop" },
 { "netlink_send" },
 { "d_instantiate" },
 { "getprocattr" },
 { "setprocattr" },
 { "ismaclabel" },
 { "secid_to_secctx" },
 { "secctx_to_secid" },
 { "release_secctx" },
 { "inode_invalidate_secctx" },
 { "inode_notifysecctx" },
 { "inode_setsecctx" },
 { "inode_getsecctx" },
 { "post_notification" },
 { "watch_key" },
 { "unix_stream_connect" },
 { "unix_may_send" },
 { "socket_create" },
 { "socket_post_create" },
 { "socket_socketpair" },
 { "socket_bind" },
 { "socket_connect" },
 { "socket_listen" },
 { "socket_accept" },
 { "socket_sendmsg" },
 { "socket_recvmsg" },
 { "socket_getsockname" },
 { "socket_getpeername" },
 { "socket_getsockopt" },
 { "socket_setsockopt" },
 { "socket_shutdown" },
 { "socket_sock_rcv_skb" },
 { "socket_getpeersec_stream" },
 { "socket_getpeersec_dgram" },
 { "sk_alloc_security" },
 { "sk_free_security" },
 { "sk_clone_security" },
 { "sk_getsecid" },
 { "sock_graft" },
 { "inet_conn_request" },
 { "inet_csk_clone" },
 { "inet_conn_established" },
 { "secmark_relabel_packet" },
 { "secmark_refcount_inc" },
 { "secmark_refcount_dec" },
 { "req_classify_flow" },
 { "tun_dev_alloc_security" },
 { "tun_dev_free_security" },
 { "tun_dev_create" },
 { "tun_dev_attach_queue" },
 { "tun_dev_attach" },
 { "tun_dev_open" },
 { "sctp_assoc_request" },
 { "sctp_bind_connect" },
 { "sctp_sk_clone" },
 { "sctp_assoc_established" },
 { "ib_pkey_access" },
 { "ib_endport_manage_subnet" },
 { "ib_alloc_security" },
 { "ib_free_security" },
 { "xfrm_policy_alloc_security" },
 { "xfrm_policy_clone_security" },
 { "xfrm_policy_free_security" },
 { "xfrm_policy_delete_security" },
 { "xfrm_state_alloc" },
 { "xfrm_state_alloc_acquire" },
 { "xfrm_state_free_security" },
 { "xfrm_state_delete_security" },
 { "xfrm_policy_lookup" },
 { "xfrm_state_pol_flow_match" },
 { "xfrm_decode_session" },
 { "key_alloc" },
 { "key_free" },
 { "key_permission" },
 { "key_getsecurity" },
 { "key_post_create_or_update" },
 { "audit_rule_init" },
 { "audit_rule_known" },
 { "audit_rule_match" },
 { "audit_rule_free" },
 { "bpf" },
 { "bpf_map" },
 { "bpf_map_create" },
 { "bpf_prog" },
 { "bpf_prog_load" },
 { "bpf_map_alloc_security" },
 { "bpf_map_free_security" },
 { "bpf_prog_alloc_security" },
 { "bpf_prog_free_security" },
 { "locked_down" },
 { "perf_event_open" },
 { "perf_event_alloc" },
 { "perf_event_free" },
 { "perf_event_read" },
 { "perf_event_write" },
 { "init" },
 { "settime64" },
 { "vm_enough_memory_mm" },
 { "bprm_set_creds" },
 { "bprm_check" },
 { "sb_alloc" },
 { "add_mnt_opt" },
 { "inode_alloc" },
 { "old_inode_init_security" },
 { "file_alloc" },
 { "prepare_creds" },
 { "msg_msg_alloc" },
 { "msg_queue_alloc" },
 { "shm_alloc" },
 { "sem_alloc" },
 { "sock_rcv_skb" },
 { "sk_alloc" },
 { "xfrm_policy_alloc" },
 { "xfrm_policy_clone" },
 { "xfrm_policy_delete" },
 { "xfrm_state_delete" },
 { "bpf_map_alloc" },
 { "bpf_prog_alloc" },
 { "bpf_token_capable" },
 { "bpf_token" },
 { "bpf_token_create" },
 { "bpf_token_free" },
 { "uring_override_creds" },
 { "uring_sqpoll" },
 { "uring_cmd" },
};
